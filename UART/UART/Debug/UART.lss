
UART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000036c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  0000036c  000003e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  000003e0  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000097  00000000  00000000  00000aac  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      0000002f  00000000  00000000  00000b43  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  00000b72  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000491  00000000  00000000  00000bd2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000245  00000000  00000000  00001063  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000218  00000000  00000000  000012a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000d0  00000000  00000000  000014c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000001ba  00000000  00000000  00001590  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002ae  00000000  00000000  0000174a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  000019f8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 b4 01 	jmp	0x368	; 0x368 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:


//#include <avr/io.h>
#include "UART_DVR.h"
int main(void)
{
  6c:	cf 93       	push	r28
  6e:	df 93       	push	r29
  70:	cd b7       	in	r28, 0x3d	; 61
  72:	de b7       	in	r29, 0x3e	; 62
  74:	6d 97       	sbiw	r28, 0x1d	; 29
  76:	0f b6       	in	r0, 0x3f	; 63
  78:	f8 94       	cli
  7a:	de bf       	out	0x3e, r29	; 62
  7c:	0f be       	out	0x3f, r0	; 63
  7e:	cd bf       	out	0x3d, r28	; 61
   char Str[20];
   char data;
  UART_Config UART_Conf;
  UART_Conf.Mode=ASYNC;
  80:	1d 8a       	std	Y+21, r1	; 0x15
  UART_Conf.Speed_mode=NORMAL_SPEED;
  82:	1a 8e       	std	Y+26, r1	; 0x1a
  UART_Conf.Char_Size=eight_bit_mode;
  84:	88 e0       	ldi	r24, 0x08	; 8
  86:	89 8f       	std	Y+25, r24	; 0x19
  UART_Conf.Stop_bit=One_stop_bit;
  88:	81 e0       	ldi	r24, 0x01	; 1
  8a:	8e 8b       	std	Y+22, r24	; 0x16
  UART_Conf.Rate=2400;
  8c:	80 e6       	ldi	r24, 0x60	; 96
  8e:	99 e0       	ldi	r25, 0x09	; 9
  90:	9c 8f       	std	Y+28, r25	; 0x1c
  92:	8b 8f       	std	Y+27, r24	; 0x1b
  UART_Conf.Prty_mode=DISABLED;
  94:	1f 8a       	std	Y+23, r1	; 0x17
  UART_Conf.TX_RX=TX_RX_Enable;
  96:	82 e0       	ldi	r24, 0x02	; 2
  98:	8d 8f       	std	Y+29, r24	; 0x1d
  UART_Init(& UART_Conf);
  9a:	ce 01       	movw	r24, r28
  9c:	45 96       	adiw	r24, 0x15	; 21
  9e:	0e 94 5a 00 	call	0xb4	; 0xb4 <UART_Init>
  //UCSRB = (1<<RXEN) | (1<<TXEN);
   while(1)
   {
	   //data = UART_recieveByte(); //Receive Byte from Terminal1
	   //UART_sendByte(data); //Resend the received byte to Terminal2
	   UART_receiveString(Str); //Receive String from Terminal
  a2:	ce 01       	movw	r24, r28
  a4:	01 96       	adiw	r24, 0x01	; 1
  a6:	0e 94 73 01 	call	0x2e6	; 0x2e6 <UART_receiveString>
	   UART_sendString(Str); //Resend the string to Terminal2
  aa:	ce 01       	movw	r24, r28
  ac:	01 96       	adiw	r24, 0x01	; 1
  ae:	0e 94 5e 01 	call	0x2bc	; 0x2bc <UART_sendString>
  b2:	f7 cf       	rjmp	.-18     	; 0xa2 <main+0x36>

000000b4 <UART_Init>:
#include "UART_DVR.h"



uint8 UART_Init(UART_Config *g_UART_Config)
{
  b4:	cf 93       	push	r28
  b6:	df 93       	push	r29
  b8:	ec 01       	movw	r28, r24
	uint8 prty_error=0,stop_Error=0,speed_error=0 , bit_mode_error=0, polarity_error=0;
	uint16 UBRR=0;
	
    if(g_UART_Config->Mode==SYNC)
  ba:	88 81       	ld	r24, Y
  bc:	81 30       	cpi	r24, 0x01	; 1
  be:	49 f5       	brne	.+82     	; 0x112 <UART_Init+0x5e>
	{
	  CLEAR_BIT(UCSRC,URSEL);
  c0:	80 b5       	in	r24, 0x20	; 32
  c2:	8f 77       	andi	r24, 0x7F	; 127
  c4:	80 bd       	out	0x20, r24	; 32
	  
	  UBRR = (F_CPU/(2*g_UART_Config->Rate))-1;
  c6:	2e 81       	ldd	r18, Y+6	; 0x06
  c8:	3f 81       	ldd	r19, Y+7	; 0x07
  ca:	22 0f       	add	r18, r18
  cc:	33 1f       	adc	r19, r19
  ce:	40 e0       	ldi	r20, 0x00	; 0
  d0:	50 e0       	ldi	r21, 0x00	; 0
  d2:	60 e4       	ldi	r22, 0x40	; 64
  d4:	72 e4       	ldi	r23, 0x42	; 66
  d6:	8f e0       	ldi	r24, 0x0F	; 15
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	0e 94 92 01 	call	0x324	; 0x324 <__udivmodsi4>
  de:	21 50       	subi	r18, 0x01	; 1
  e0:	31 09       	sbc	r19, r1
	  UBRRL=UBRR;
  e2:	29 b9       	out	0x09, r18	; 9
	  UBRRH=(UBRR>>8);
  e4:	30 bd       	out	0x20, r19	; 32
	    
	  SET_BIT(UCSRC,URSEL);
  e6:	80 b5       	in	r24, 0x20	; 32
  e8:	80 68       	ori	r24, 0x80	; 128
  ea:	80 bd       	out	0x20, r24	; 32
	  
	  SET_BIT(UCSRC,UMSEL);
  ec:	80 b5       	in	r24, 0x20	; 32
  ee:	80 64       	ori	r24, 0x40	; 64
  f0:	80 bd       	out	0x20, r24	; 32
	  
	  if(g_UART_Config->Clk_Plrty==Rising_edge_TX)
  f2:	8b 81       	ldd	r24, Y+3	; 0x03
  f4:	81 11       	cpse	r24, r1
  f6:	05 c0       	rjmp	.+10     	; 0x102 <UART_Init+0x4e>
	  {
        CLEAR_BIT(UCSRC,UCPOL);
  f8:	80 b5       	in	r24, 0x20	; 32
  fa:	8e 7f       	andi	r24, 0xFE	; 254
  fc:	80 bd       	out	0x20, r24	; 32



uint8 UART_Init(UART_Config *g_UART_Config)
{
	uint8 prty_error=0,stop_Error=0,speed_error=0 , bit_mode_error=0, polarity_error=0;
  fe:	80 e0       	ldi	r24, 0x00	; 0
 100:	67 c0       	rjmp	.+206    	; 0x1d0 <UART_Init+0x11c>
	  
	  if(g_UART_Config->Clk_Plrty==Rising_edge_TX)
	  {
        CLEAR_BIT(UCSRC,UCPOL);
	  }
	  else if (g_UART_Config->Clk_Plrty==Falling_edge_TX)
 102:	81 30       	cpi	r24, 0x01	; 1
 104:	09 f0       	breq	.+2      	; 0x108 <UART_Init+0x54>
 106:	61 c0       	rjmp	.+194    	; 0x1ca <UART_Init+0x116>
	  {
		   SET_BIT(UCSRC,UCPOL);
 108:	80 b5       	in	r24, 0x20	; 32
 10a:	81 60       	ori	r24, 0x01	; 1
 10c:	80 bd       	out	0x20, r24	; 32



uint8 UART_Init(UART_Config *g_UART_Config)
{
	uint8 prty_error=0,stop_Error=0,speed_error=0 , bit_mode_error=0, polarity_error=0;
 10e:	80 e0       	ldi	r24, 0x00	; 0
 110:	5f c0       	rjmp	.+190    	; 0x1d0 <UART_Init+0x11c>
	  polarity_error=-1;
	  
	  
	  
	}
	else if(g_UART_Config->Mode==ASYNC) 
 112:	81 11       	cpse	r24, r1
 114:	5c c0       	rjmp	.+184    	; 0x1ce <UART_Init+0x11a>
	{ 
	 
	  if(g_UART_Config->Speed_mode==NORMAL_SPEED) 
 116:	8d 81       	ldd	r24, Y+5	; 0x05
 118:	81 11       	cpse	r24, r1
 11a:	27 c0       	rjmp	.+78     	; 0x16a <UART_Init+0xb6>
	 
	 { 
		 
		  
	  CLEAR_BIT(UCSRA,U2X);
 11c:	59 98       	cbi	0x0b, 1	; 11
	 
	  CLEAR_BIT(UCSRC,URSEL);
 11e:	80 b5       	in	r24, 0x20	; 32
 120:	8f 77       	andi	r24, 0x7F	; 127
 122:	80 bd       	out	0x20, r24	; 32
	  UBRR = (F_CPU/((uint32)16*g_UART_Config->Rate))-1;
 124:	2e 81       	ldd	r18, Y+6	; 0x06
 126:	3f 81       	ldd	r19, Y+7	; 0x07
 128:	c9 01       	movw	r24, r18
 12a:	a0 e0       	ldi	r26, 0x00	; 0
 12c:	b0 e0       	ldi	r27, 0x00	; 0
 12e:	88 0f       	add	r24, r24
 130:	99 1f       	adc	r25, r25
 132:	aa 1f       	adc	r26, r26
 134:	bb 1f       	adc	r27, r27
 136:	88 0f       	add	r24, r24
 138:	99 1f       	adc	r25, r25
 13a:	aa 1f       	adc	r26, r26
 13c:	bb 1f       	adc	r27, r27
 13e:	9c 01       	movw	r18, r24
 140:	ad 01       	movw	r20, r26
 142:	22 0f       	add	r18, r18
 144:	33 1f       	adc	r19, r19
 146:	44 1f       	adc	r20, r20
 148:	55 1f       	adc	r21, r21
 14a:	22 0f       	add	r18, r18
 14c:	33 1f       	adc	r19, r19
 14e:	44 1f       	adc	r20, r20
 150:	55 1f       	adc	r21, r21
 152:	60 e4       	ldi	r22, 0x40	; 64
 154:	72 e4       	ldi	r23, 0x42	; 66
 156:	8f e0       	ldi	r24, 0x0F	; 15
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	0e 94 92 01 	call	0x324	; 0x324 <__udivmodsi4>
 15e:	21 50       	subi	r18, 0x01	; 1
 160:	31 09       	sbc	r19, r1
	  UBRRL=UBRR;
 162:	29 b9       	out	0x09, r18	; 9
	  UBRRH=(UBRR>>8);
 164:	30 bd       	out	0x20, r19	; 32



uint8 UART_Init(UART_Config *g_UART_Config)
{
	uint8 prty_error=0,stop_Error=0,speed_error=0 , bit_mode_error=0, polarity_error=0;
 166:	80 e0       	ldi	r24, 0x00	; 0
 168:	26 c0       	rjmp	.+76     	; 0x1b6 <UART_Init+0x102>
	  UBRRL=UBRR;
	  UBRRH=(UBRR>>8);
	  //UCSRA = (1<<U2X);
     			 
	}
	 else if(g_UART_Config->Speed_mode==DOUBLE_SPEED)
 16a:	81 30       	cpi	r24, 0x01	; 1
 16c:	19 f5       	brne	.+70     	; 0x1b4 <UART_Init+0x100>
	 {
		 
	 
	  SET_BIT(UCSRA,U2X);
 16e:	59 9a       	sbi	0x0b, 1	; 11
	  CLEAR_BIT(UCSRC,URSEL);
 170:	80 b5       	in	r24, 0x20	; 32
 172:	8f 77       	andi	r24, 0x7F	; 127
 174:	80 bd       	out	0x20, r24	; 32
       UBRR = (F_CPU/((uint32) 8*g_UART_Config->Rate))-1;
 176:	2e 81       	ldd	r18, Y+6	; 0x06
 178:	3f 81       	ldd	r19, Y+7	; 0x07
 17a:	c9 01       	movw	r24, r18
 17c:	a0 e0       	ldi	r26, 0x00	; 0
 17e:	b0 e0       	ldi	r27, 0x00	; 0
 180:	88 0f       	add	r24, r24
 182:	99 1f       	adc	r25, r25
 184:	aa 1f       	adc	r26, r26
 186:	bb 1f       	adc	r27, r27
 188:	88 0f       	add	r24, r24
 18a:	99 1f       	adc	r25, r25
 18c:	aa 1f       	adc	r26, r26
 18e:	bb 1f       	adc	r27, r27
 190:	9c 01       	movw	r18, r24
 192:	ad 01       	movw	r20, r26
 194:	22 0f       	add	r18, r18
 196:	33 1f       	adc	r19, r19
 198:	44 1f       	adc	r20, r20
 19a:	55 1f       	adc	r21, r21
 19c:	60 e4       	ldi	r22, 0x40	; 64
 19e:	72 e4       	ldi	r23, 0x42	; 66
 1a0:	8f e0       	ldi	r24, 0x0F	; 15
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	0e 94 92 01 	call	0x324	; 0x324 <__udivmodsi4>
 1a8:	21 50       	subi	r18, 0x01	; 1
 1aa:	31 09       	sbc	r19, r1
	 //UBRR=1;
	 // UBRR=12;
	   UBRRL=UBRR;
 1ac:	29 b9       	out	0x09, r18	; 9
	   UBRRH=(UBRR>>8);
 1ae:	30 bd       	out	0x20, r19	; 32



uint8 UART_Init(UART_Config *g_UART_Config)
{
	uint8 prty_error=0,stop_Error=0,speed_error=0 , bit_mode_error=0, polarity_error=0;
 1b0:	80 e0       	ldi	r24, 0x00	; 0
 1b2:	01 c0       	rjmp	.+2      	; 0x1b6 <UART_Init+0x102>
	 
	
	 }
	 
	  else
	 {speed_error=-1;}
 1b4:	8f ef       	ldi	r24, 0xFF	; 255
	 
	 
	 
	 
	 
	  SET_BIT(UCSRC,URSEL);	
 1b6:	90 b5       	in	r25, 0x20	; 32
 1b8:	90 68       	ori	r25, 0x80	; 128
 1ba:	90 bd       	out	0x20, r25	; 32
	  
	  CLEAR_BIT(UCSRC,UMSEL);
 1bc:	90 b5       	in	r25, 0x20	; 32
 1be:	9f 7b       	andi	r25, 0xBF	; 191
 1c0:	90 bd       	out	0x20, r25	; 32
	  
	  CLEAR_BIT(UCSRC,UCPOL);
 1c2:	90 b5       	in	r25, 0x20	; 32
 1c4:	9e 7f       	andi	r25, 0xFE	; 254
 1c6:	90 bd       	out	0x20, r25	; 32
 1c8:	03 c0       	rjmp	.+6      	; 0x1d0 <UART_Init+0x11c>



uint8 UART_Init(UART_Config *g_UART_Config)
{
	uint8 prty_error=0,stop_Error=0,speed_error=0 , bit_mode_error=0, polarity_error=0;
 1ca:	80 e0       	ldi	r24, 0x00	; 0
 1cc:	01 c0       	rjmp	.+2      	; 0x1d0 <UART_Init+0x11c>
 1ce:	80 e0       	ldi	r24, 0x00	; 0
	
	}
	else
	polarity_error= Mode_Error;
	
	switch(g_UART_Config->Prty_mode)
 1d0:	9a 81       	ldd	r25, Y+2	; 0x02
 1d2:	99 23       	and	r25, r25
 1d4:	59 f0       	breq	.+22     	; 0x1ec <UART_Init+0x138>
 1d6:	9a 30       	cpi	r25, 0x0A	; 10
 1d8:	81 f0       	breq	.+32     	; 0x1fa <UART_Init+0x146>
 1da:	9b 30       	cpi	r25, 0x0B	; 11
 1dc:	a1 f4       	brne	.+40     	; 0x206 <UART_Init+0x152>
	//case DISA : CLEAR_BIT(UCSRC,UPM1);
	            //    CLEAR_BIT(UCSRC,UPM0);
					//break;
{					
	case ENABLED_ODD: SET_BIT(UCSRC,UPM1);
 1de:	90 b5       	in	r25, 0x20	; 32
 1e0:	90 62       	ori	r25, 0x20	; 32
 1e2:	90 bd       	out	0x20, r25	; 32
	                  SET_BIT(UCSRC,UPM0);
 1e4:	90 b5       	in	r25, 0x20	; 32
 1e6:	90 61       	ori	r25, 0x10	; 16
 1e8:	90 bd       	out	0x20, r25	; 32
	                  break;
 1ea:	0d c0       	rjmp	.+26     	; 0x206 <UART_Init+0x152>
	case DISABLED: CLEAR_BIT(UCSRC,UPM1);
 1ec:	90 b5       	in	r25, 0x20	; 32
 1ee:	9f 7d       	andi	r25, 0xDF	; 223
 1f0:	90 bd       	out	0x20, r25	; 32
	               CLEAR_BIT(UCSRC,UPM0);
 1f2:	90 b5       	in	r25, 0x20	; 32
 1f4:	9f 7e       	andi	r25, 0xEF	; 239
 1f6:	90 bd       	out	0x20, r25	; 32
	               break;
 1f8:	06 c0       	rjmp	.+12     	; 0x206 <UART_Init+0x152>
				   
	case ENABLED_EVEN : SET_BIT(UCSRC,UPM1);
 1fa:	90 b5       	in	r25, 0x20	; 32
 1fc:	90 62       	ori	r25, 0x20	; 32
 1fe:	90 bd       	out	0x20, r25	; 32
	                    CLEAR_BIT(UCSRC,UPM0);
 200:	90 b5       	in	r25, 0x20	; 32
 202:	9f 7e       	andi	r25, 0xEF	; 239
 204:	90 bd       	out	0x20, r25	; 32
    
	default : prty_error=-1;
										
	
}
 if(g_UART_Config->Stop_bit==One_stop_bit)
 206:	99 81       	ldd	r25, Y+1	; 0x01
 208:	91 30       	cpi	r25, 0x01	; 1
 20a:	21 f4       	brne	.+8      	; 0x214 <UART_Init+0x160>
 {
	 CLEAR_BIT(UCSRC,USBS);
 20c:	90 b5       	in	r25, 0x20	; 32
 20e:	97 7f       	andi	r25, 0xF7	; 247
 210:	90 bd       	out	0x20, r25	; 32
 212:	05 c0       	rjmp	.+10     	; 0x21e <UART_Init+0x16a>
 }
 else if(g_UART_Config->Stop_bit==two_stop_bit)
 214:	92 30       	cpi	r25, 0x02	; 2
 216:	19 f4       	brne	.+6      	; 0x21e <UART_Init+0x16a>
 {
	 SET_BIT(UCSRC,USBS);
 218:	90 b5       	in	r25, 0x20	; 32
 21a:	98 60       	ori	r25, 0x08	; 8
 21c:	90 bd       	out	0x20, r25	; 32
 }
 else
 stop_Error=-1;
 
 switch(g_UART_Config->Char_Size)
 21e:	9c 81       	ldd	r25, Y+4	; 0x04
 220:	97 30       	cpi	r25, 0x07	; 7
 222:	d9 f0       	breq	.+54     	; 0x25a <UART_Init+0x1a6>
 224:	28 f4       	brcc	.+10     	; 0x230 <UART_Init+0x17c>
 226:	95 30       	cpi	r25, 0x05	; 5
 228:	41 f0       	breq	.+16     	; 0x23a <UART_Init+0x186>
 22a:	96 30       	cpi	r25, 0x06	; 6
 22c:	69 f5       	brne	.+90     	; 0x288 <UART_Init+0x1d4>
 22e:	0d c0       	rjmp	.+26     	; 0x24a <UART_Init+0x196>
 230:	98 30       	cpi	r25, 0x08	; 8
 232:	d9 f0       	breq	.+54     	; 0x26a <UART_Init+0x1b6>
 234:	99 30       	cpi	r25, 0x09	; 9
 236:	41 f5       	brne	.+80     	; 0x288 <UART_Init+0x1d4>
 238:	20 c0       	rjmp	.+64     	; 0x27a <UART_Init+0x1c6>
 //case DISA : CLEAR_BIT(UCSRC,UPM1);
 //    CLEAR_BIT(UCSRC,UPM0);
 //break;
 {
	 case five_bit_mode: CLEAR_BIT(UCSRC,UCSZ0);
 23a:	90 b5       	in	r25, 0x20	; 32
 23c:	9d 7f       	andi	r25, 0xFD	; 253
 23e:	90 bd       	out	0x20, r25	; 32
	                     CLEAR_BIT(UCSRC,UCSZ1);
 240:	90 b5       	in	r25, 0x20	; 32
 242:	9b 7f       	andi	r25, 0xFB	; 251
 244:	90 bd       	out	0x20, r25	; 32
						 CLEAR_BIT(UCSRB,UCSZ2);
 246:	52 98       	cbi	0x0a, 2	; 10
	                     break;
 248:	1f c0       	rjmp	.+62     	; 0x288 <UART_Init+0x1d4>
     case six_bit_mode: SET_BIT(UCSRC,UCSZ0);
 24a:	90 b5       	in	r25, 0x20	; 32
 24c:	92 60       	ori	r25, 0x02	; 2
 24e:	90 bd       	out	0x20, r25	; 32
                         CLEAR_BIT(UCSRC,UCSZ1);
 250:	90 b5       	in	r25, 0x20	; 32
 252:	9b 7f       	andi	r25, 0xFB	; 251
 254:	90 bd       	out	0x20, r25	; 32
                         CLEAR_BIT(UCSRB,UCSZ2);
 256:	52 98       	cbi	0x0a, 2	; 10
                         break;
 258:	17 c0       	rjmp	.+46     	; 0x288 <UART_Init+0x1d4>
						 						 
     case seven_bit_mode: CLEAR_BIT(UCSRC,UCSZ0);
 25a:	90 b5       	in	r25, 0x20	; 32
 25c:	9d 7f       	andi	r25, 0xFD	; 253
 25e:	90 bd       	out	0x20, r25	; 32
	                   SET_BIT(UCSRC,UCSZ1);
 260:	90 b5       	in	r25, 0x20	; 32
 262:	94 60       	ori	r25, 0x04	; 4
 264:	90 bd       	out	0x20, r25	; 32
	                   CLEAR_BIT(UCSRB,UCSZ2);
 266:	52 98       	cbi	0x0a, 2	; 10
					   	break;
 268:	0f c0       	rjmp	.+30     	; 0x288 <UART_Init+0x1d4>
     case eight_bit_mode: SET_BIT(UCSRC,UCSZ0);
 26a:	90 b5       	in	r25, 0x20	; 32
 26c:	92 60       	ori	r25, 0x02	; 2
 26e:	90 bd       	out	0x20, r25	; 32
                          SET_BIT(UCSRC,UCSZ1);
 270:	90 b5       	in	r25, 0x20	; 32
 272:	94 60       	ori	r25, 0x04	; 4
 274:	90 bd       	out	0x20, r25	; 32
                          CLEAR_BIT(UCSRB,UCSZ2);
 276:	52 98       	cbi	0x0a, 2	; 10
					      break;
 278:	07 c0       	rjmp	.+14     	; 0x288 <UART_Init+0x1d4>
	case nine_bit_mode : SET_BIT(UCSRC,UCSZ0);
 27a:	90 b5       	in	r25, 0x20	; 32
 27c:	92 60       	ori	r25, 0x02	; 2
 27e:	90 bd       	out	0x20, r25	; 32
	                     SET_BIT(UCSRC,UCSZ1);
 280:	90 b5       	in	r25, 0x20	; 32
 282:	94 60       	ori	r25, 0x04	; 4
 284:	90 bd       	out	0x20, r25	; 32
	                     SET_BIT(UCSRB,UCSZ2);	
 286:	52 9a       	sbi	0x0a, 2	; 10
											   
	}
	// CLEAR_BIT(UCSRC,URSEL);
	 //return speed_error;
	 
	 switch(g_UART_Config->TX_RX)
 288:	98 85       	ldd	r25, Y+8	; 0x08
 28a:	91 30       	cpi	r25, 0x01	; 1
 28c:	21 f0       	breq	.+8      	; 0x296 <UART_Init+0x1e2>
 28e:	30 f0       	brcs	.+12     	; 0x29c <UART_Init+0x1e8>
 290:	92 30       	cpi	r25, 0x02	; 2
 292:	49 f4       	brne	.+18     	; 0x2a6 <UART_Init+0x1f2>
 294:	06 c0       	rjmp	.+12     	; 0x2a2 <UART_Init+0x1ee>
	 {
		 case TX_Enable: SET_BIT(UCSRB,TXEN);
 296:	53 9a       	sbi	0x0a, 3	; 10
		                 CLEAR_BIT(UCSRB,RXEN);
 298:	54 98       	cbi	0x0a, 4	; 10
						 break;
 29a:	05 c0       	rjmp	.+10     	; 0x2a6 <UART_Init+0x1f2>
						 
		 case RX_Enable: SET_BIT(UCSRB,RXEN);
 29c:	54 9a       	sbi	0x0a, 4	; 10
		                 CLEAR_BIT(UCSRB,TXEN);
 29e:	53 98       	cbi	0x0a, 3	; 10
		                 break;				 
 2a0:	02 c0       	rjmp	.+4      	; 0x2a6 <UART_Init+0x1f2>
		 case TX_RX_Enable: SET_BIT(UCSRB,TXEN);
 2a2:	53 9a       	sbi	0x0a, 3	; 10
		                    SET_BIT(UCSRB,RXEN);
 2a4:	54 9a       	sbi	0x0a, 4	; 10
							
		                   break;
	 }
     
return speed_error;
}
 2a6:	df 91       	pop	r29
 2a8:	cf 91       	pop	r28
 2aa:	08 95       	ret

000002ac <UART_sendByte>:

void UART_sendByte(const char data)
{
	while(!(UCSRA & (1<<UDRE))){} //UDRE flag is set when the buffer is empty and ready for transmitting a new byte so wait until this flag is set to one.
 2ac:	5d 9b       	sbis	0x0b, 5	; 11
 2ae:	fe cf       	rjmp	.-4      	; 0x2ac <UART_sendByte>
	UDR = data;
 2b0:	8c b9       	out	0x0c, r24	; 12
 2b2:	08 95       	ret

000002b4 <UART_recieveByte>:
}

char UART_recieveByte(void)
{
	while(!(UCSRA & (1<<RXC))){} //RXC flag is set when the UART receive data so until this flag is set to one
 2b4:	5f 9b       	sbis	0x0b, 7	; 11
 2b6:	fe cf       	rjmp	.-4      	; 0x2b4 <UART_recieveByte>
	return UDR;
 2b8:	8c b1       	in	r24, 0x0c	; 12
}
 2ba:	08 95       	ret

000002bc <UART_sendString>:

void UART_sendString(const char *Str)
{
 2bc:	1f 93       	push	r17
 2be:	cf 93       	push	r28
 2c0:	df 93       	push	r29
 2c2:	ec 01       	movw	r28, r24
	unsigned char i = 0;
	while(Str[i] != '\0')
 2c4:	88 81       	ld	r24, Y
 2c6:	88 23       	and	r24, r24
 2c8:	51 f0       	breq	.+20     	; 0x2de <UART_sendString+0x22>
	return UDR;
}

void UART_sendString(const char *Str)
{
	unsigned char i = 0;
 2ca:	10 e0       	ldi	r17, 0x00	; 0
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
 2cc:	0e 94 56 01 	call	0x2ac	; 0x2ac <UART_sendByte>
		i++;
 2d0:	1f 5f       	subi	r17, 0xFF	; 255
}

void UART_sendString(const char *Str)
{
	unsigned char i = 0;
	while(Str[i] != '\0')
 2d2:	fe 01       	movw	r30, r28
 2d4:	e1 0f       	add	r30, r17
 2d6:	f1 1d       	adc	r31, r1
 2d8:	80 81       	ld	r24, Z
 2da:	81 11       	cpse	r24, r1
 2dc:	f7 cf       	rjmp	.-18     	; 0x2cc <UART_sendString+0x10>
	{
		UART_sendByte(Str[i]);
		i++;
	}
}
 2de:	df 91       	pop	r29
 2e0:	cf 91       	pop	r28
 2e2:	1f 91       	pop	r17
 2e4:	08 95       	ret

000002e6 <UART_receiveString>:

void UART_receiveString(char *Str)
{
 2e6:	ff 92       	push	r15
 2e8:	0f 93       	push	r16
 2ea:	1f 93       	push	r17
 2ec:	cf 93       	push	r28
 2ee:	df 93       	push	r29
 2f0:	8c 01       	movw	r16, r24
	unsigned char i = 0;
	Str[i] = UART_recieveByte();
 2f2:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <UART_recieveByte>
 2f6:	f8 01       	movw	r30, r16
 2f8:	80 83       	st	Z, r24
	while(Str[i] != '#')
 2fa:	83 32       	cpi	r24, 0x23	; 35
 2fc:	59 f0       	breq	.+22     	; 0x314 <UART_receiveString+0x2e>
	}
}

void UART_receiveString(char *Str)
{
	unsigned char i = 0;
 2fe:	f1 2c       	mov	r15, r1
	Str[i] = UART_recieveByte();
	while(Str[i] != '#')
	{
		i++;
 300:	f3 94       	inc	r15
		Str[i] = UART_recieveByte();
 302:	e8 01       	movw	r28, r16
 304:	cf 0d       	add	r28, r15
 306:	d1 1d       	adc	r29, r1
 308:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <UART_recieveByte>
 30c:	88 83       	st	Y, r24

void UART_receiveString(char *Str)
{
	unsigned char i = 0;
	Str[i] = UART_recieveByte();
	while(Str[i] != '#')
 30e:	83 32       	cpi	r24, 0x23	; 35
 310:	b9 f7       	brne	.-18     	; 0x300 <UART_receiveString+0x1a>
 312:	01 c0       	rjmp	.+2      	; 0x316 <UART_receiveString+0x30>
 314:	e8 01       	movw	r28, r16
	{
		i++;
		Str[i] = UART_recieveByte();
	}
	Str[i] = '\0';
 316:	18 82       	st	Y, r1
}
 318:	df 91       	pop	r29
 31a:	cf 91       	pop	r28
 31c:	1f 91       	pop	r17
 31e:	0f 91       	pop	r16
 320:	ff 90       	pop	r15
 322:	08 95       	ret

00000324 <__udivmodsi4>:
 324:	a1 e2       	ldi	r26, 0x21	; 33
 326:	1a 2e       	mov	r1, r26
 328:	aa 1b       	sub	r26, r26
 32a:	bb 1b       	sub	r27, r27
 32c:	fd 01       	movw	r30, r26
 32e:	0d c0       	rjmp	.+26     	; 0x34a <__udivmodsi4_ep>

00000330 <__udivmodsi4_loop>:
 330:	aa 1f       	adc	r26, r26
 332:	bb 1f       	adc	r27, r27
 334:	ee 1f       	adc	r30, r30
 336:	ff 1f       	adc	r31, r31
 338:	a2 17       	cp	r26, r18
 33a:	b3 07       	cpc	r27, r19
 33c:	e4 07       	cpc	r30, r20
 33e:	f5 07       	cpc	r31, r21
 340:	20 f0       	brcs	.+8      	; 0x34a <__udivmodsi4_ep>
 342:	a2 1b       	sub	r26, r18
 344:	b3 0b       	sbc	r27, r19
 346:	e4 0b       	sbc	r30, r20
 348:	f5 0b       	sbc	r31, r21

0000034a <__udivmodsi4_ep>:
 34a:	66 1f       	adc	r22, r22
 34c:	77 1f       	adc	r23, r23
 34e:	88 1f       	adc	r24, r24
 350:	99 1f       	adc	r25, r25
 352:	1a 94       	dec	r1
 354:	69 f7       	brne	.-38     	; 0x330 <__udivmodsi4_loop>
 356:	60 95       	com	r22
 358:	70 95       	com	r23
 35a:	80 95       	com	r24
 35c:	90 95       	com	r25
 35e:	9b 01       	movw	r18, r22
 360:	ac 01       	movw	r20, r24
 362:	bd 01       	movw	r22, r26
 364:	cf 01       	movw	r24, r30
 366:	08 95       	ret

00000368 <_exit>:
 368:	f8 94       	cli

0000036a <__stop_program>:
 36a:	ff cf       	rjmp	.-2      	; 0x36a <__stop_program>
